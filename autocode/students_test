package coverage

import (
	"errors"
	"fmt"
	"os"
	"testing"
	"time"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW
// define errors
var (
	ErrorLenIsNotPositive = errors.New("ERROR: Len of structure is not positive")
	ErrorLenIsMoreThanMaxValue = errors.New("ERROR: Len of struncture is more than max")
	ErrorStructureIsNotDefine = errors.New("ERROR: Structure is not define")
	ErrorLessIsNotBool = errors.New("ERROR: Result of func Less is not bool")
	ErrorLessTestShouldBeMore = errors.New("ERROR: Zero record should be more in test DB")
	ErrorLessCompletelyEqual = errors.New("ERROR: Two records are completely equl")
	ErrorSwapIsNotCorrect = errors.New("ERROR: Swap finished with wrong result")
	ErrorSetIsNotWork = errors.New("ERROR: ")
)

// create test Poeple struct
func createPeople () People {
	return []Person {
		{firstName: "Ivan", lastName: "Ivanov", birthDay: time.Date(2006,time.September,28,10,48,0,0,time.Local)},
		{firstName: "Евгений", lastName: "Силуанов", birthDay: time.Date(1977,time.January,12,01,23,0,0,time.Local)},
		{firstName: "Евгений", lastName: "Chiluanov", birthDay: time.Date(1977,time.January,12,01,23,0,0,time.Local)},		
		{firstName: "СуперДа", lastName: "Костилья", birthDay: time.Date(1897,time.April,04,14,38,0,0,time.Local)},
		{firstName: "Irina", lastName: "Sheptunova", birthDay: time.Date(1986,time.August,11,00,45,0,0,time.Local)},
		{firstName: "Николай", lastName: "Скиперда", birthDay: time.Date(1973,time.June,24,23,28,0,0,time.Local)},
		{firstName: "Николай I", lastName: "Скиперда", birthDay: time.Date(1973,time.June,24,23,28,0,0,time.Local)},
	}
}

// Test Len
func Test_Len(t *testing.T) {
	var strPeople People = createPeople()
	//for _, val:= range strPeople {
	//	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", val.firstName, val.lastName, val.birthDay.Format("2006-01-02 15:04"))
	//}
	if strPeople.Len() < 0 {
		t.Error(ErrorLenIsNotPositive)
	} else if strPeople.Len() == 0 {
		t.Error(ErrorStructureIsNotDefine)
	} else if strPeople.Len() > 2147483647 {
		t.Error(ErrorLenIsMoreThanMaxValue)
	}
}

// Test Less
func Test_Less(t *testing.T) {
	var strPeople People = createPeople()
	// check 0,3 records on right calculation
	fmt.Println("Test #1 on correct of execution")
	fmt.Println("Value #0:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[0].firstName, strPeople[0].lastName, strPeople[0].birthDay.Format("2006-01-02 15:04"))
	fmt.Println("Value #3:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[3].firstName, strPeople[3].lastName, strPeople[3].birthDay.Format("2006-01-02 15:04"))
	if !strPeople.Less(0,3) {
		//t.Error(ErrorLessTestShouldBeMore)
		fmt.Println("Test Less is not PASSED - not OK")
		fmt.Println(ErrorLessTestShouldBeMore)
	} else {
		fmt.Println("Test Less is PASSED - OK")
	}
	// check 1,2 records on right calculation
	fmt.Println("Test #2 on correct of execution")
	fmt.Println("Value #1:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[1].firstName, strPeople[1].lastName, strPeople[1].birthDay.Format("2006-01-02 15:04"))
	fmt.Println("Value #2:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[2].firstName, strPeople[2].lastName, strPeople[2].birthDay.Format("2006-01-02 15:04"))
	fmt.Println(strPeople.Less(1,2))
	if !strPeople.Less(1,2) {
		fmt.Println("Test Less is PASSED - OK")
	} else {
		//t.Error(ErrorLessTestShouldBeMore)
		fmt.Println("Test Less is not PASSED - not OK")
		fmt.Println(ErrorLessTestShouldBeMore)
	}
	// check on equavalents
	fmt.Println("Test on correct of equl")
	fmt.Println("Value #5:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[5].firstName, strPeople[5].lastName, strPeople[5].birthDay.Format("2006-01-02 15:04"))
	fmt.Println("Value #6:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[6].firstName, strPeople[6].lastName, strPeople[6].birthDay.Format("2006-01-02 15:04"))
	defer func() {
		//t.Error(ErrorLessCompletelyEqual)
		fmt.Println("Test on correct of equl is FALSE")
		fmt.Println(ErrorLessCompletelyEqual)
	}()
	if strPeople.Less(5,6) {
		fmt.Println("Test on correct of equl is TRUE")
	}
}

// Fuzz Test Less
//func Fuzz_Less(f *testing.F) {
//	var strPeople People = createPeople()
//	f.Add(1,2)
//	f.Fuzz(func(t *testing.T, i int, j int){
//		resLess := strPeople.Less(i, j)
//		fmt.Printf("Fuzz result of func Less #%v is %t\n", "1", resLess)
//	})
//
//}

// Test swap
func Test_Swap(t *testing.T) {
	var bSwapfirstName string
	var bSwaplastName string
	var bSwapbirthDay time.Time

	var strPeople People = createPeople()
	fmt.Println("Test on correct of Swap")
	fmt.Println("Value #0:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[0].firstName, strPeople[0].lastName, strPeople[0].birthDay.Format("2006-01-02 15:04"))
	fmt.Println("Value #4:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[4].firstName, strPeople[4].lastName, strPeople[4].birthDay.Format("2006-01-02 15:04"))
	// save before swap value of zero record
	bSwapfirstName = strPeople[0].firstName
	bSwaplastName = strPeople[0].lastName
	bSwapbirthDay = strPeople[0].birthDay
	// do swap
	strPeople.Swap(0, 4)
	fmt.Println("After Swap")
	fmt.Println("Value #0:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[0].firstName, strPeople[0].lastName, strPeople[0].birthDay.Format("2006-01-02 15:04"))
	fmt.Println("Value #4:")
	fmt.Printf("first name: %v,\t last name: %v,\t birth date: %s\n", strPeople[4].firstName, strPeople[4].lastName, strPeople[4].birthDay.Format("2006-01-02 15:04"))
	// checking zero record after swap
	if bSwapfirstName == strPeople[0].firstName && bSwaplastName == strPeople[0].lastName && bSwapbirthDay.Equal(strPeople[0].birthDay) {
		// t.Error(ErrorSwapIsNotCorrect)
		fmt.Println(ErrorSwapIsNotCorrect)
	} else {
		fmt.Println("Func swap is finished - OK")
	}
}

// create test Matrix
func createMatrix() string {
	//return "10 100 12 12\n2 03 5 112\n1010010134 09 2147483660 10\n"
	return "1 2 3 4 5\n5 4 3 2 1\n1 2 3 3 2"
	//return "9223372036854775807 9223372036854775890 9223372036854775112\n9223372036854775999 9223372036854775807 9223372036854771999\n9223372036854775898 9223372036854775845 9223372036854775113"
}

// Test Matrix new
func Test_New(t *testing.T) {
	var strMatrix string = createMatrix()
	var linkOnMatrix *Matrix
	var err error

	linkOnMatrix, err = New(strMatrix)
	if err != nil {
		//t.Error(err)
		fmt.Println(err)
	} else {
		fmt.Println("Test func New is PASSED - OK")
		fmt.Println(linkOnMatrix)
	}
}

// Test Rows
func Test_Rows(t *testing.T) {
	var strMatrix string = createMatrix()
	var linkOnMatrix *Matrix
	var err error

	linkOnMatrix, err = New(strMatrix)
	if err != nil {
		//t.Error(err)
		fmt.Println(err)
	} else {
		rows := linkOnMatrix.Rows()
		fmt.Println("Test func Rows is PASSED - OK")
		fmt.Println(rows)	
	}
}

// Test Cols
func Test_Cols(t *testing.T) {
	var strMatrix string = createMatrix()
	var linkOnMatrix *Matrix
	var err error

	linkOnMatrix, err = New(strMatrix)
	if err != nil {
		// t.Error(err)
		fmt.Println(err)
	} else {
		cols := linkOnMatrix.Cols()
		fmt.Println("Test func Cols is PASSED - OK")
		fmt.Println(cols)	
	}
}

// Test Set
func Test_Set(t *testing.T) {
	var strMatrix string = createMatrix()
	var linkOnMatrix *Matrix
	var err error
	var resultSet bool
	var triggerError bool = false

	// create Matrix
	linkOnMatrix, err = New(strMatrix)
	if err != nil {
		// t.Error(err)
		fmt.Println(err)
	} else {
		// after execute finishet with error
		defer func() {
			if triggerError {
				t.Error(ErrorSetIsNotWork)
			}
		}()
		// get rows 
		checkValMatrix := linkOnMatrix.Rows()
		// change value into Matrix
		resultSet = linkOnMatrix.Set(0, 2, 10)
		// Set is finished correct
		if resultSet {
			// check changes
			checkValMatrixAft := linkOnMatrix.Rows()
			fmt.Printf("vaule #1: %v\n", checkValMatrix[0][2])
			fmt.Printf("vaule #2: %v\n", checkValMatrixAft[0][2])
			if checkValMatrix[0][2] == checkValMatrixAft[0][2] {
				triggerError = true
				fmt.Println("Test func Set is NOT PASSED - not OK")
			} else {
				fmt.Println("Test func Set is PASSED - OK")
			}
		} else {
			// Set is not finished correct
			triggerError = true
			fmt.Println("Wrong value row or col please re-check")
			fmt.Println("Test func Set is NOT PASSED - not OK")
		}
	}
}
